Python Training
----------------
1. SDK - basic or default libraries
2. IDLE - Integrated Development Environment
3. Shell

Primitive Datatypes
-------------------
1. Numbers
   a. integers
   b. long  (deprecated in 3.x)
   c. float
   d. complex
2. Strings
3. Boolean



long - 2983429837482734237402374L

two operators overloaded
-------------------------
+ - addition and concatenation
* - multiplication and print a string n number of times

#! - shebang - used to specify the path of .exe files or executable files

print("hello world")

single line comments
--------------------
# for  single line comments 


Strings
-------
single line string are enclosed in "" or ''

multiple line strings are enclosed in """  """ or '''   '''

docstrings - written on top of the functions - to specify what the function does


parenthesis or brackets
-----------------------
loops, conditional statements, functions, classes


for i 
{

}

if ()
{   

} else {

}

def fun()
{

}

----------------------------------------------------------

we make use of indentation

for i in range(1, 10):
    print("hello world"

if x > 10:
   print("abc")
else:
   print("xyz")


def fun():
   print('hello world')


primary data types
------------------

1. Numbers
   a. integers
   b. float
   c. complex
2. Strings
3. Boolean

Operators
----------
Arithmetic
Comparison or relational
Logical
Bitwise 
Ternary

bitwise operators
------------------
5 - 0101
3 - 0011

or
--
0101
0011
----
0111   - 7
-----

and
---
0101
0011
----
0001
----

XOR
----
1 1 0
0 0 0
1 0 1
0 1 1

0101
0011
----
0110 - 6
----


left shift operator
-------------------
5 << 1 
0101 << 1
1010 - 10

8 << 1
1000 << 1
10000 - 16

5 << 2
0101 << 2
10100 - 20

5 >> 1
0101 >> 1
0010 - 2

~5  
8 bit data
00000101 flipped 11111010
and its two compliment representation = -6

Loops and control structure
---------------------------
 if condition
--------------
srt_data = input("prompt")


range function to generate numbers

range(1, 10, 1) => 1 to less than 10 and incr by 1

print function
---------------
print(data, sep=, end="\n")

print the pattern
------------------
1
23
456
78910


1 2 3 4 5
 1 2 3 4 
  1 2 3
   1 2
    1
   2 1
  3 2 1
 4 3 2 1
5 4 3 2 1

generate prime numbers between 150 and 50 and also print the count of it.


 
Topics for the day
------------------
Numbers
Operators
Loops and Control Structures
Strings

Data Structures
---------------
1. Lists
2. Dictionary
3. Tuples
4. Set

Functions
----------
Create a function
Call a function
Pass Arguments
Keyword Args
Variable length args
return value
more than one return value
recursive calls
docstrings
pass by val
pass by ref
lambdas
scope of a variable
  a. local
  b. global
  c. non local
Nested functions
closures
HOF
Decorator (design Pattern)

Oops 
----
classes
Objects
constructor
destructor
class attribute
class method
operator overloading
   a. __str__, __gt__, __eq__, @total_ordering
   b. arithmetic operator
   c. __iter__, __getitem__, __setitem__, 
   d. pvt variables
convert setter, getter, deleter method to properties
inheritance
abstract class
polymorphism
Duck typing

python debugging - pdb
exceptions
Regex
Packaging and Modules
Networking
Threads and Multithreading
Numpy and pandas
Flask and REST API


DSA
----












